#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2015,SC2034,SC2181,SC2154

################################################################################

APP="Anicorn"
VER="2.1.9"
DESC="Simple utility for starting/restarting Unicorn"

################################################################################

NORM=0
BOLD=1
ITLC=3
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[${NORM}m"
CL_BOLD="\e[${BOLD}m"
CL_ITLC="\e[${ITLC}m"
CL_UNLN="\e[${UNLN}m"
CL_RED="\e[${RED}m"
CL_GREEN="\e[${GREEN}m"
CL_YELLOW="\e[${YELLOW}m"
CL_BLUE="\e[${BLUE}m"
CL_MAG="\e[${MAG}m"
CL_CYAN="\e[${CYAN}m"
CL_GREY="\e[${GREY}m"
CL_DARK="\e[${DARK}m"
CL_BL_RED="\e[${BOLD};${RED}m"
CL_BL_GREEN="\e[${BOLD};${GREEN}m"
CL_BL_YELLOW="\e[${BOLD};${YELLOW}m"
CL_BL_BLUE="\e[${BOLD};${BLUE}m"
CL_BL_MAG="\e[${BOLD};${MAG}m"
CL_BL_CYAN="\e[${BOLD};${CYAN}m"
CL_BL_GREY="\e[${BOLD};${GREY}m"
CL_IT_DARK="\e[${ITLC};${DARK}m"

################################################################################

DELAY_START=15
DELAY_INIT=30
DELAY_MONITOR=5
DELAY_WATCHDOG_KILL=60

# Path to temporary file for output
TMP_OUTPUT="/tmp/anicorn.output"

# Path to anicorn binary
BIN="$0"

################################################################################

# Path to Unicorn configuration file (String)
unicorn_config=""

# Path to PID file (String)
pid_file=""

# -
# Monitoring flag (Boolean)
disable_monitoring=""

################################################################################

SUPPORTED_ARGS="config watchdog !no_color !version !help"
SHORT_ARGS="c:config w:watchdog nc:!no_color h:!help v:!version"

################################################################################

main() {
  if [[ ! -c /dev/stdout || -n "$no_color" || -n "$NO_COLOR" ]] ; then
    unset NORM BOLD CL_ITLC UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_IT_DARK
    no_color=true
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" ]] ; then
    usage
    exit 0
  fi

  if [[ -z "$config" && $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  if [[ -n "$watchdog" ]] ; then
    monitorStoppedUnicorn "$watchdog"
    exit 0
  fi

  if [[ -n "$config" ]] ; then
    unicorn_config="$config"
  else
    unicorn_config="$1"
  fi

  checkRuby

  pid_file=$(extractPathToPIDFile "$unicorn_config")

  checkConfig
  checkPIDFile

  log "$APP $VER is started"

  trap sigHandler SIGTERM

  startUnicorn
  monitorUnicorn
}

# Check Unicorn configuration file
#
# Code: No
# Echo: No
checkConfig() {
  if [[ ! -e "$unicorn_config" ]] ; then
    log "[ERROR] Config $unicorn_config doesn't exist"
    exit 1
  fi

  if [[ ! -f "$unicorn_config" ]] ; then
    log "[ERROR] Config $unicorn_config isn't a file"
    exit 1
  fi

  if [[ ! -s "$unicorn_config" ]] ; then
    log "[ERROR] Config $unicorn_config is empty"
    exit 1
  fi
}

# Check if Ruby is installed
#
# Code: No
# Echo: No
checkRuby() {
  if ! type ruby &>/dev/null ; then
    log "[ERROR] Ruby is required for $APP"
    exit 1
  fi
}

# Check if running process is Unicorn
#
# 1: Process ID (Integer)
#
# Code: Yes
# Echo: No
isUnicornProcess() {
    local pid

    pid="$1"

    if [[ -e "/proc/$pid" ]] ; then
        grep -qaE ^unicorn < "/proc/$pid/cmdline"
        return $?
    else
        return 1
    fi
}

# Check path to PID file and clean PID file if it exists and process is dead
#
# Code: No
# Echo: No
checkPIDFile() {
  if [[ -z "$pid_file" ]] ; then
    log "[ERROR] Can't extract path to PID file from Unicorn config"
    exit 1
  fi

  local pid

  pid=$(getPID)

  if [[ -n "$pid" ]] ; then
      if ! isUnicornProcess "$pid" ; then
          log "[ERROR] Running process with PID ${pid} is not a Unicorn"
          exit 1
      fi
  else
      rm -f "$pid_file"
  fi
}

# Run Unicorn
#
# Code: No
# Echo: No
startUnicorn() {
  if [[ -e "$pid_file" ]] ; then
    log "Unicorn already works, restarting..."
    restartUnicorn
    return
  fi

  disable_monitoring=true

  log "Starting Unicorn..."

  local pid

  unicorn -c "$unicorn_config" -D &> $TMP_OUTPUT

  if [[ $? -ne 0 ]] ; then
    log "[ERROR] Can't start Unicorn. Output saved as $TMP_OUTPUT"
    exit 1
  fi

  if ! isUnicornWorking ; then
    log "[ERROR] Can't start Unicorn. Output saved as $TMP_OUTPUT"
    exit 1
  fi

  pid=$(getPID)

  log "Unicorn successfully started (PID: $pid)"

  disable_monitoring=""

  rm -f $TMP_OUTPUT
}

# Restart Unicorn
#
# Code: No
# Echo: No
restartUnicorn() {
  local pid

  pid=$(getPID)

  if [[ -z "$pid" ]] ; then
    log "[ERROR] Looks like Unicorn is already down"
    return 1
  fi

  log "Restarting Unicorn (PID: $pid)..."

  kill -USR2 "$pid"

  if isNewMasterSpawned "$pid" ; then
    sleep $DELAY_INIT
    kill -QUIT "$pid"
    pid=$(getPID)
    log "Unicorn restarted (New PID: ${pid:-unknown})"
    return 0
  fi

  log "[ERROR] Can't restart Unicorn"

  return 1
}

# Monitor Unicorn process state
#
# Code: No
# Echo: No
monitorUnicorn() {
  local pid

  while : ; do
    sleep $DELAY_MONITOR

    if [[ -n "$disable_monitoring" ]] ; then
      continue
    fi

    pid=$(getPID)

    if [[ -z "$pid" || ! -e "/proc/$pid" ]] ; then
      log "[WARN] Looks like Unicorn is down. Restarting..."

      startUnicorn
    fi
  done
}

# TERM signal handler
#
# Code: No
# Echo: No
sigHandler() {
  log "Got TERM signal"

  # Temporary disable monitoring
  disable_monitoring=true

  log "Running watchdog process to kill Unicorn in $DELAY_WATCHDOG_KILL seconds"

  runWatchdog

  log "$APP is now shutting down"

  exit 0
}

# Check if Unicorn is working
#
# Code: Yes
# Echo: No
isUnicornWorking() {
  local pid

  for i in $(seq 0 $DELAY_START) ; do
    sleep 1

    if [[ ! -e "$pid_file" ]] ; then
      continue
    fi

    pid=$(getPID)

    if [[ "$pid" == "" || ! -e "/proc/$pid" ]] ; then
      continue
    fi

    return 0
  done

  return 1
}

# Check if new Unicorn master process has successfully started
#
# 1: Old PID (Number)
#
# Code: Yes
# Echo: No
isNewMasterSpawned() {
  local old_pid="$1"
  local pid

  for i in $(seq 0 $DELAY_START) ; do
    sleep 1

    pid=$(getPID)

    if [[ -z "$pid" ]] ; then
      continue
    fi

    return 0
  done

  return 1
}

# Run anicorn as a process monitor for current Unicorn process
#
# 1: PID (Number)
#
# Code: No
# Echo: No
runWatchdog() {
  local pid

  pid=$(getPID)

  if [[ -z "$pid" ]] ; then
    log "[ERROR] Can't start watchdog: can't find Unicorn PID"
    return
  fi

  $BIN --watchdog "$pid" &>/dev/null &

  disown
}

# Terminate Unicorn if it hasn't been restarted
#
# 1: PID (Number)
#
# Code: No
# Echo: No
monitorStoppedUnicorn() {
  local pid="$1"

  for i in $(seq 0 $DELAY_WATCHDOG_KILL) ; do
    if [[ ! -e "/proc/$pid" ]] ; then
      exit 0
    fi

    sleep 1
  done

  kill -TERM "$pid"
}

# Read PID from PID file and validate it
#
# Code: No
# Echo: PID (Number)
getPID() {
  local pid

  if [[ ! -e "$pid_file" ]] ; then
    return
  fi

  pid=$(tr -d '\n\r' < "$pid_file")

  if [[ -z "$pid" || ! -e "/proc/$pid" ]] ; then
    return
  fi

  echo "$pid"
}

# Extract path to PID file from Unicorn config
#
# 1: Path to configuration file (String)
#
# Code: No
# Echo: Path to PID file (String)
extractPathToPIDFile() {
  ruby -e "%w(after_fork after_worker_exit after_worker_ready before_exec before_fork check_client_connection client_body_buffer_size listen logger preload_app rewindable_input stderr_path stdout_path timeout user worker_exec worker_processes working_directory).each{|m| define_method(m){|*|} }; def pid(pid); puts pid; end; eval File.read '$1'" 2>/dev/null
}

# Print message with current time
#
# 1: Message (String)
#
# Code: No
# Echo: No
log() {
  local now

  now=$(date +'[ %Y/%m/%d %H:%M:%S ]')

  echo "$now $*"
}

# Print message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

################################################################################

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} anicorn ${CL_CYAN}unicorn-conf${CL_NORM}"
  show ""
  show "Arguments" $BOLD
  show ""
  show "  ${CL_CYAN}unicorn-conf${CL_NORM}  Path to Unicorn configuration file"
  show ""
  show "Examples" $BOLD
  show ""
  show "  anicorn /srv/projects/example/current/config/unicorn.rb"
  show "  ${CL_IT_DARK}Run Unicorn with Anicorn${CL_NORM}"
  show ""
  show "  anicorn -c /srv/projects/example/current/config/unicorn.rb"
  show "  ${CL_IT_DARK}Run Unicorn with Anicorn using Unicorn compatible syntax${CL_NORM}"
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  show "Unknown option $1" $RED 1>&2
  exit 1
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
